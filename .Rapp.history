corsim(x=getx(tree), lambda=params$par[1], mu=params$par[2], missing=1, told=getx(tree)[1], tyoung=0)
?corsim
x<-c(1,1.5,3,5)#
# We simulate using the following parameters:#
lambda<-2#
mu<-1#
tyoung<-0.5#
told<-4.5#
# We simulate 5 additional speciation times (i.e. five additional species):#
missing<-5#
#
# xcompleted is x plus 5 additional speciation events between 0.5 and 4.5 timesteps #
# in the past. xcompleted corresponds to a 10-species tree:#
xcompleted<-corsim(x,lambda,mu,missing,told,tyoung)
xcompleted
getx(tree)[1]
as.numeric(getx(tree)[1])
corsim(x=getx(tree), lambda=params$par[1], mu=params$par[2], missing=1, told=as.numeric(getx(tree)[1]), tyoung=0)
params$par[1]
as.numeric(params$par[1])
corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0)
setdiff(getx(tree),corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0))
setdiff(corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0), getx(tree))
setdiff(corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0), getx(tree))
setdiff(corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0), getx(tree))
setdiff(corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0), getx(tree))
setdiff(corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1]), tyoung=0), getx(tree))
test <- corsim(x=getx(tree), lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), missing=1, told=as.numeric(getx(tree)[1])
)
test
as.numeric(getx(tree)[1])
test
setdiff(test, getx(tree))
times
load_all()
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bdScaler(tree, lambda=as.numeric(params$par[1]), mu=as.numeric(params$par[2]), max.age=getx(tree)[1], min.age=0)
bind.tip
?bind.tip
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="midpoint", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
plot(test$trees[[1]])
plot(test$trees[[1]], cex=0.1)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
runif(n=1, min=0, max=2)
runif(n=1, min=0, max=2)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="overall", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
plot(test$trees[[1]])
plot(test$trees[[1]], cex=0.1)
min(test$trees[[1]]$edge.length)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="uniform",#
	branch.position="overall", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
2-runif(n=1, min=0, max=2)#
							+ optional.offset)
2-runif(n=1, min=0, max=2)+ optional.offset)
2-runif(n=1, min=0, max=2)+ optional.offset
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
2-runif(n=1, min=0, max=2)+ 1e-12
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="bd", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="midpoint", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
temp <- 1
names(temp) <- "ding"
temp
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=temp)
runif(n=1, min=1, max=as.numeric(temp))
runif(n=1, min=0, max=temp)
runif(n=1, min=0, max=temp)
runif(n=1, min=0, max=temp)
runif(n=1, min=0, max=temp)
runif(n=1, min=0, max=temp)
runif(n=1, min=0, max=temp)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
print("test",1)
print(c("test",1))
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
possGroupings <- identifyMissing(tree, allGroupings, print.to.screen)
possGroupings <- identifyMissing(tree, allGroupings, print.to.screen=FALSE)
possGroupings
dim(possGroupings)
problemTaxa <- dangerList(tree, namedClades, crown.can.move=T, print.to.screen=F)
problemTaxa
new.tree <- tree
grouped <- allGroupings[allGroupings$species %in% new.tree$tip.label, ]
head(grouped)
dim(grouped)
bindingToList <- grouped$species[grouped$group == possGroupings$group[1]]
bindingToList
possGroupings$group[1]
head(possGroupings)
head(allGroupings)
bindingToSpecies <- sample(bindingToList, 1)
bindingToSpecies
bindingTo <- which(new.tree$tip.label==bindingToSpecies)
bindingTo
parent <- new.tree$edge[,1][new.tree$edge[,2]==bindingTo]
parent
head(new.tree$edge)
grandparent <- new.tree$edge[,1][new.tree$edge[,2]==parent]
grandparent
new.tree$edge[new.tree$edge[,1]==207,]
new.tree$edge[new.tree$edge[,1]==238,]
new.tree$tip.label[239]
new.tree$tip.label[91]
tempMatrix <- new.tree$edge#
			rownames(tempMatrix) <- 1:dim(tempMatrix)[1]
head(tempMatrix)
parentIndex <- rownames(tempMatrix)[tempMatrix[,1]==parent #
				& tempMatrix[,2]==bindingTo]
parentIndex
tempMatrix[183,]
grandparentIndex <- rownames(tempMatrix)[tempMatrix[,1]==grandparent #
				& tempMatrix[,2]==parent]
grandparentIndex
tempMatrix[175,]
new.tree$edge.length
new.tree$edge.length[183]
new.tree$edge.length[175]
parentIndex <- as.numeric(parentIndex)#
			grandparentIndex <- as.numeric(grandparentIndex)
head(new.tree$edge)
plot(new.tree,cex=0.1)
bindingToSpecies
sort(new.tree$edge.length)
parentDistance <- new.tree$edge.length[parentIndex]#
			grandparentDistance <- new.tree$edge.length[grandparentIndex]
parentDistnace
parentDistance
grandparentDistance
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="crown",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
params <- find.mle(lik, method="subplex", c(1,0.1))
params
1.525032e-01
1.525032e-01-1.525879e-06
params <- find.mle(lik, method="optim", c(1,0.1))
sampledFreq
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="crown",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="crown",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
plot(test$trees[[1]])
plot(test$trees[[1]], cex=0.1)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
load_all()
plot(test$trees[[1]], cex=0.1)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="bd", optional.offset=1e-12, no.tree=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
params$par
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="midpoint", optional.offset=1e-12, no.trees=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="bd", lambda=params$par[1], mu=params$par[2], optional.offset=1e-12,#
	no.trees=1, clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="crown",#
	branch.position="bd", lambda=params$par[1], mu=params$par[2], optional.offset=1e-12,#
	no.trees=1, clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
plot(test$trees[[1]], cex=0.1)
hist(test$trees[[1]]$edge.length)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=0, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
bdScaler(tree, lambda=params$par[1], mu=params$par[2], min.age=1, max.age=2)
load_all()
test <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="bd", lambda=params$par[1], mu=params$par[2], optional.offset=1e-12,#
	no.trees=1, clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
plot(test$trees[[1]], cex=0.1)
hist(test$trees[[1]]$edge.length)
lik2 <- make.bd(test, sampling.f=1)#
params2 <- find.mle(lik2, method="subplex", c(1,0.1))
lik2 <- make.bd(test$trees[[1]], sampling.f=1)#
params2 <- find.mle(lik2, method="subplex", c(1,0.1))
params2
?randomlyAddTaxa
randomly <- randomlyAddTaxa(tree=bird.families, groupings=groupsDF,#
	from.node="randomly", branch.position="bd", no.trees=10,#
	clade.membership=cladesDF, crown.can.move=TRUE, print.to.screen=FALSE)
data(bird.families)#
bird.families <- multi2di(bird.families)#
#
#create a data frame of all taxa from the phylogeny, and make up species groups#
#for each.#
dummyGroups <- data.frame(species=bird.families$tip.label,#
group=c(rep("nonPasserine", 95), rep("suboscine", 9), rep("basalOscine", 13),#
rep("oscine", 20)))#
#
#now make up a few passerine taxa that are missing and add these into the dummy frame#
toAdd <- data.frame(species=c("Icteria", "Yuhina", "Pityriasis", "Macgregoria"),#
group=c(rep("oscine", 2), rep("basalOscine", 2)))#
groupsDF <- rbind(dummyGroups, toAdd)#
#
#these groups were actually monophyletic. but make a slightly more detailed clade#
#membership frame to see how one would be used. note that it doesn't include the#
#missing taxa, and taxonomy does not exactly follow modern understanding#
cladesDF <- data.frame(species=bird.families$tip.label,#
clade=c(rep("nonPasserine", 95), rep("suboscine", 9), rep("basalOscineOther", 6),#
rep("basalOscineCore", 7), rep("oscineBase", 14), rep("oscineDerived", 6)))
randomly <- randomlyAddTaxa(tree=bird.families, groupings=groupsDF,#
	from.node="randomly", branch.position="bd", no.trees=10,#
	clade.membership=cladesDF, crown.can.move=TRUE, print.to.screen=FALSE)
plot(randomly$trees[[1]])
randomly <- randomlyAddTaxa(tree=bird.families, groupings=groupsDF,#
	from.node="randomly", branch.position="bd", no.trees=10,#
	clade.membership=cladesDF, crown.can.move=TRUE, print.to.screen=FALSE)
plot(randomly$trees[[1]])
randomly <- randomlyAddTaxa(tree=bird.families, groupings=groupsDF,#
	from.node="randomly", branch.position="bd", no.trees=10,#
	clade.membership=cladesDF, crown.can.move=TRUE, print.to.screen=FALSE)
plot(randomly$trees[[1]])
corsim(x=getx(tree), lambda=params$par[1], mu=params$par[2], told=max(nodeHeights(tree)), missing=dim(allGroupings)[1]-length(tree$tip.label))
corsim(x=getx(tree), lambda=params$par[1], mu=params$par[2], told=max(nodeHeights(tree)), missing=dim(allGroupings)[1]-length(tree$tip.label))->temp
hist(temp)
test1 <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="midpoint", optional.offset=1e-12, no.trees=1,#
	clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)#
#
test2 <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="uniform", lambda=params$par[1], mu=params$par[2], optional.offset=1e-12,#
	no.trees=1, clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)#
#
test3 <- randomlyAddTaxa(tree=tree, groupings=allGroupings, from.node="randomly",#
	branch.position="bd", lambda=params$par[1], mu=params$par[2], optional.offset=1e-12,#
	no.trees=1, clade.membership=namedClades, crown.can.move=TRUE, print.to.screen=FALSE)
lik2 <- make.bd(test1$trees[[1]], sampling.f=1)#
params2 <- find.mle(lik2, method="subplex", c(1,0.1))
params2
params
lik1 <- make.bd(test1$trees[[1]], sampling.f=1)#
params1 <- find.mle(lik1, method="subplex", c(1,0.1))#
#
lik2 <- make.bd(test2$trees[[1]], sampling.f=1)#
params2 <- find.mle(lik2, method="subplex", c(1,0.1))#
#
lik3 <- make.bd(test3$trees[[1]], sampling.f=1)#
params3 <- find.mle(lik3, method="subplex", c(1,0.1))
print(params1$par)
print(c(params1$par, params2$par, params3$par))
params$par
1.525552e-01-8.387246e-06
0.17807159-0.03603172
0.22231014-0.10967302
0.30922394-0.21495743
ltt(test)
ltt(tree)
quartz()
ltt(test1$trees[[1]])
quartz()
ltt(test2$trees[[1]])
ltt(test3$trees[[1]])
